version: '3.8'

services:
  # Override to use simpler images or local alternatives
  postgres:
    image: postgres:15-alpine
    # Alternative: use a local build if network issues persist
    # build: docker/Dockerfile.postgres (if we create one)

  redis:
    image: redis:7-alpine
    # Alternative: use redis:alpine for smaller size
    # image: redis:alpine

  # Use our pre-built backend image
  backend:
    image: kpi-backend:test
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    environment:
      - DATABASE_URL=postgresql://dashboard_user:${DB_PASSWORD:-dev_password_123}@postgres:5432/mmtg_dashboard
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_very_long_and_secure_for_development_only}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Try building frontend locally first
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped

  # Ingestion service
  ingestion:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ingestion
    environment:
      - DATABASE_URL=postgresql://dashboard_user:${DB_PASSWORD:-dev_password_123}@postgres:5432/mmtg_dashboard
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped