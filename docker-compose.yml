services:
  # PostgreSQL Database
  postgres:
    image: public.ecr.aws/docker/library/postgres:15-alpine   # <-- miroir officiel
    container_name: kpi-postgres-dev
    environment:
      POSTGRES_DB: mmtg_dashboard
      POSTGRES_USER: dashboard_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_password}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d mmtg_dashboard -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: public.ecr.aws/docker/library/redis:7-alpine       # <-- miroir officiel
    container_name: kpi-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    ports:
      - "6379:6379"
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: kpi-backend-dev
    environment:
      - NODE_ENV=production
      - API_PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mmtg_dashboard
      - DB_USER=dashboard_user
      - DB_PASSWORD=${DB_PASSWORD:-your_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_AVAILABLE=true
      - KPI_DATA_PATH=/backend/kpi_data
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - CORS_ORIGIN=http://localhost:5173
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - ./kpi_data:/backend/kpi_data
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Development (with hot reload)
  frontend-dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend.dev
    container_name: kpi-frontend-dev-server
    ports:
      - "5173:5173"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:3000/api
      - VITE_PROXY_TARGET=http://backend:3000
    command: npm run dev -- --host 0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173 || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 30s

  # Frontend Production (nginx)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: kpi-frontend-prod
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  kpi-network:
    driver: bridge
