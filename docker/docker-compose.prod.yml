version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kpi-postgres-prod
    environment:
      POSTGRES_DB: mmtg_dashboard
      POSTGRES_USER: dashboard_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d mmtg_dashboard"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kpi-redis-prod
    command: redis-server --appendonly yes
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: kpi-backend-prod
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mmtg_dashboard
      - DB_USER=dashboard_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - API_PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - FTP_HOST=${FTP_HOST}
      - FTP_USER=${FTP_USER}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - LOG_LEVEL=info
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: kpi-frontend-prod
    environment:
      - VITE_API_BASE_URL=http://localhost:3000/api
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - kpi-network
    restart: unless-stopped

  # Data Ingestion Service
  ingestion:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ingestion
    container_name: kpi-ingestion-prod
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mmtg_dashboard
      - DB_USER=dashboard_user
      - DB_PASSWORD=${DB_PASSWORD}
      - FTP_HOST=${FTP_HOST}
      - FTP_USER=${FTP_USER}
      - FTP_PASSWORD=${FTP_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    command: ["cron", "-f"]

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  kpi-network:
    driver: bridge